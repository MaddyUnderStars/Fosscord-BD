diff --git a/node_modules/ittai/entities/Plugin.js b/node_modules/ittai/entities/Plugin.js
index 91a42d0..61c7d49 100644
--- a/node_modules/ittai/entities/Plugin.js
+++ b/node_modules/ittai/entities/Plugin.js
@@ -12,6 +12,10 @@ export default /**
 	start() {}
 	stop() {}
 
+	load() {
+		if (this.load) this.instance.load();
+	}
+
 	setSettingsPanel(component) {
 		this.__ittaiInternalPlugin.setSettingsPanel(component);
 	}
diff --git a/node_modules/ittai/logger/createArguments.js b/node_modules/ittai/logger/createArguments.js
index 3a4499c..2358a96 100644
--- a/node_modules/ittai/logger/createArguments.js
+++ b/node_modules/ittai/logger/createArguments.js
@@ -1,6 +1,6 @@
 export default function createArguments(...args) {
 	return [
-		"%cIttai",
+		"%cFosscord",
 		"color: #000; background-color: #42ffa7; font-family: default; padding-left: 3px; padding-right: 3px; border-radius: 2px; font-weight: bold;",
 		...args,
 	];
diff --git a/node_modules/ittai/patcher/index.d.ts b/node_modules/ittai/patcher/index.d.ts
index c798e3f..d6576b9 100644
--- a/node_modules/ittai/patcher/index.d.ts
+++ b/node_modules/ittai/patcher/index.d.ts
@@ -1,5 +1,5 @@
 type BeforePatchFunction = (args: any, thisArg: any) => any
-type InsteadPatchFunction = (args: any, thisArg: any, ogFunc: Function) => any
+type InsteadPatchFunction = (args: any, original: any, thisArg: any) => any;
 type AfterPatchFunction = (args: any, res: any, thisArg: any) => any
 
 type PatchData = {
diff --git a/node_modules/ittai/patcher/patch.js b/node_modules/ittai/patcher/patch.js
index e67c968..0d556bf 100644
--- a/node_modules/ittai/patcher/patch.js
+++ b/node_modules/ittai/patcher/patch.js
@@ -12,6 +12,7 @@ export default /**
  * @memberof module:patcher
  * @tutorial patching
  */ function patch(name, object, functionName, type, patchFunction) {
+	if (!object) throw new Error("Cannot patch nothing!");
 	const id = object.__ittai__ ?? randomString(25, Object.keys(patches));
 	object.__ittai__ = object.__ittai__ ?? id;
 	if (!patches[id]) patches[id] = {};
@@ -55,6 +56,10 @@ export default /**
 			patches: [],
 		};
 
+		if (!patches[id][functionName].original) {
+			throw new Error(`original function ${functionName} lost!`);
+		}
+
 		const props = { ...object[functionName] };
 
 		object[functionName] = function (...args) {
@@ -83,10 +88,7 @@ export default /**
 				for (const instead of insteads) {
 					// Do trash merge with Lodash.
 					try {
-						(res = globalThis._.merge(
-							res,
-							instead.patchFunction(args, this, functionData.original) ?? {}
-						)),
+						(res = instead.patchFunction(args, functionData.original.bind(this), this)),
 							(ranOnce = true);
 					} catch (e) {
 						logger.error(`Error running instead patch ${name}.`, e);
